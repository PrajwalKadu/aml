import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from PIL import Image
import numpy as np

# Load and preprocess the MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# Build the neural network model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10, activation='softmax'))

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model only if it hasn't been trained before
try:
    model.load_weights('mnist_model.h5')
except (OSError, ValueError):
    model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_split=0.2)
    model.save_weights('mnist_model.h5')

# Load your own image for prediction
image_path = 'image.jpg'  # Replace with the path to your image
input_image = Image.open(image_path).convert('L')  # Convert to grayscale
input_image = input_image.resize((28, 28))  # Resize to 28x28 pixels
input_data = np.array(input_image).reshape((1, 28, 28, 1)).astype('float32') / 255

# Make predictions
predictions = model.predict(input_data)
predicted_class = np.argmax(predictions)

print("Predicted Class:", predicted_class)
